<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wanghwyd.github.io/blogs</id>
    <title>小浩</title>
    <updated>2021-12-17T03:32:28.058Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wanghwyd.github.io/blogs"/>
    <link rel="self" href="https://wanghwyd.github.io/blogs/atom.xml"/>
    <subtitle>温故而知新,记录日常遇到的问题,资料</subtitle>
    <logo>https://wanghwyd.github.io/blogs/images/avatar.png</logo>
    <icon>https://wanghwyd.github.io/blogs/favicon.ico</icon>
    <rights>All rights reserved 2021, 小浩</rights>
    <entry>
        <title type="html"><![CDATA[sql查询当天，当月，上个月，当年,上年的数据]]></title>
        <id>https://wanghwyd.github.io/blogs/post/sql-cha-xun-dang-tian-dang-yue-shang-ge-yue-dang-nian-shang-nian-de-shu-ju/</id>
        <link href="https://wanghwyd.github.io/blogs/post/sql-cha-xun-dang-tian-dang-yue-shang-ge-yue-dang-nian-shang-nian-de-shu-ju/">
        </link>
        <updated>2021-12-17T02:57:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="当天">当天</h1>
<pre><code class="language-sql">select * from 表名 where TO_DAYS(时间字段名) = TO_DAYS(NOW());
</code></pre>
<h1 id="昨天">昨天</h1>
<pre><code class="language-sql">SELECT * FROM 表名 WHERE TO_DAYS(NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1
</code></pre>
<h1 id="前天">前天</h1>
<pre><code class="language-sql">SELECT * FROM 表名 WHERE TO_DAYS(NOW( ) ) - TO_DAYS( 时间字段名) = 2
</code></pre>
<h1 id="最近7天">最近7天</h1>
<pre><code class="language-sql">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)
</code></pre>
<h1 id="最近30天">最近30天</h1>
<pre><code class="language-sql">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)
</code></pre>
<h1 id="这周数据">这周数据</h1>
<pre><code class="language-sql">SELECT * FROM 表名 WHERE YEARWEEK(DATE_FORMAT(时间字段名,'%Y-%m-%d')) = YEARWEEK(NOW());
</code></pre>
<h1 id="上周数据">上周数据</h1>
<pre><code class="language-sql">SELECT * FROM 表名 WHERE YEARWEEK(DATE_FORMAT(时间字段名,'%Y-%m-%d')) = YEARWEEK(NOW()) - 1;
</code></pre>
<h1 id="当月">当月</h1>
<pre><code class="language-sql">SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
</code></pre>
<h1 id="上月">上月</h1>
<pre><code class="language-sql">SELECT * FROM 表名 WHERE PERIOD_DIFF( DATE_FORMAT(NOW( ) , '%Y%m' ) , DATE_FORMAT( 时间字段名, '%Y%m' ) ) =1
</code></pre>
<h1 id="本季度数据">本季度数据</h1>
<pre><code class="language-sql">select * from 表名 where QUARTER(时间字段名)=QUARTER(NOW());
</code></pre>
<h1 id="上季度数据">上季度数据</h1>
<pre><code class="language-sql">select * from 表名 where QUARTER(时间字段名)=QUARTER(DATE_SUB(NOW(),interval 1 QUARTER));
</code></pre>
<h1 id="当前半年">当前半年</h1>
<pre><code class="language-sql">select * from 表名 where 时间字段名 between date_sub(NOW(),interval 6 month) and NOW();
</code></pre>
<h1 id="当年">当年</h1>
<pre><code class="language-sql">select * from 表名 where YEAR(时间字段名)=YEAR(NOW());
</code></pre>
<h1 id="上年">上年</h1>
<pre><code class="language-sql">select * from 表名 where year(时间字段名)=year(DATE_SUB(NOW(),interval 1 year));
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[配置SpringBoot同时支持http和https访问]]></title>
        <id>https://wanghwyd.github.io/blogs/post/pei-zhi-springboot-tong-shi-zhi-chi-http-he-https-fang-wen/</id>
        <link href="https://wanghwyd.github.io/blogs/post/pei-zhi-springboot-tong-shi-zhi-chi-http-he-https-fang-wen/">
        </link>
        <updated>2021-12-03T06:11:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="配置https访问">配置https访问</h2>
<ul>
<li>1.生成证书</li>
<li>如果配置了JAVA开发环境，可以使用keytool命令生成证书。我们打开控制台，输入：<pre><code>keytool -genkey -alias tomcat -dname &quot;CN=Andy,OU=kfit,O=kfit,L=HaiDian,ST=BeiJing,C=CN&quot; -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 365

</code></pre>
输入后会提示输入密码，这个密码在下面配置文件有用到。<br>
生成后，在家目录找到证书文件，复制到SpringBoot应用的src/main/resources下。<br>
2.在SpringBoot应用的application.properties增加ssl配置：</li>
</ul>
<pre><code>#https端口号.
server.port=443
#证书的路径.
server.ssl.key-store=classpath:keystore.p12
#证书密码，请修改为您自己证书的密码.
server.ssl.key-store-password=123456（改为之前设置的密码）
#秘钥库类型
server.ssl.keyStoreType=PKCS12
#证书别名
server.ssl.keyAlias=tomcat
</code></pre>
<p>或者在application.yml,加入下列配置：</p>
<pre><code>ssl:
 key-store: server.keystore
 enabled: true
 key-store-password: 123456 改为之前设置的密码）
 key-store-type: JKS
</code></pre>
<p>此时启动SpringBoot应用，发现可以通过https访问了。</p>
<h3 id="配置http访问">配置http访问</h3>
<p>由于之前在配置文件配置了https，因此http要通过代码的形式配置。这个配置也比较简单，添加一个配置类就可以了。</p>
<pre><code class="language-java">@Configuration
public class TomcatConfig {

@Value(&quot;${server.http.port}&quot;)
private int httpPort;

@Bean
public EmbeddedServletContainerCustomizer containerCustomizer() {
    return new EmbeddedServletContainerCustomizer() {
        @Override
        public void customize(ConfigurableEmbeddedServletContainer container) {
            if (container instanceof TomcatEmbeddedServletContainerFactory) {
                TomcatEmbeddedServletContainerFactory containerFactory =
                        (TomcatEmbeddedServletContainerFactory) container;

                Connector connector = new Connector(TomcatEmbeddedServletContainerFactory.DEFAULT_PROTOCOL);
                connector.setPort(httpPort);
                containerFactory.addAdditionalTomcatConnectors(connector);
            }
        }
    };
}
}
</code></pre>
<p>此时启动SpringBoot应用，发现也可以通过http 访问了。</p>
<p>作者：慢游世界<br>
链接：https://www.jianshu.com/p/49bdcaf74513<br>
来源：简书<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[高德地图 缩放地图根据层级显示setLabel]]></title>
        <id>https://wanghwyd.github.io/blogs/post/gao-de-di-tu-suo-fang-di-tu-gen-ju-ceng-ji-xian-shi-setlabel/</id>
        <link href="https://wanghwyd.github.io/blogs/post/gao-de-di-tu-suo-fang-di-tu-gen-ju-ceng-ji-xian-shi-setlabel/">
        </link>
        <updated>2021-11-25T09:29:14.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-javascript">      this.map.on('zoomend', () =&gt; {
        let zoom = this.map.getZoom() //获取当前地图级别
        console.log(zoom + '结束')
        if (zoom &gt; 13) {
          this.pointToAvoidDisasterMarkerList.forEach((item) =&gt; {
            item.setLabel({
              offset: new AMap.Pixel(0, -2), //设置文本标注偏移量
              content: &quot;&lt;div class='map-info'&gt;&quot; + item.detail.name + '&lt;/div&gt;', //设置文本标注内容
              direction: 'bottom', //设置文本标注方位
            })
          })
        } else {
          this.pointToAvoidDisasterMarkerList.forEach((item) =&gt; {
            item.setLabel(null)
          })
        }
      })

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[windows服务 使用installutil手工安装windows服务]]></title>
        <id>https://wanghwyd.github.io/blogs/post/windows-fu-wu-shi-yong-installutil-shou-gong-an-zhuang-windows-fu-wu/</id>
        <link href="https://wanghwyd.github.io/blogs/post/windows-fu-wu-shi-yong-installutil-shou-gong-an-zhuang-windows-fu-wu/">
        </link>
        <updated>2021-11-25T09:13:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1找到-cwindowsmicrosoftnetframeworkv4030319">1.找到 C:\Windows\Microsoft.NET\Framework\v4.0.30319</h2>
<p>打开cmd命令行</p>
<h2 id="2执行命令">2.执行命令</h2>
<pre><code>installutil E:\nginx-1.18.0\nginx-service.exe
</code></pre>
<h2 id="3完成安装提示-打开计算机管理的服务列表可以查看到自己的服务">3.完成安装提示 打开计算机管理的服务列表，可以查看到自己的服务</h2>
<h2 id="4删除服务">4.删除服务</h2>
<pre><code>installutil E:\nginx-1.18.0\nginx-service.exe -u
刷新服务列表，发现找不到自己的服务了
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx配置文件详解]]></title>
        <id>https://wanghwyd.github.io/blogs/post/nginx-pei-zhi-wen-jian-xiang-jie/</id>
        <link href="https://wanghwyd.github.io/blogs/post/nginx-pei-zhi-wen-jian-xiang-jie/">
        </link>
        <updated>2021-11-25T03:17:27.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">######Nginx配置文件nginx.conf中文详解#####
 
#定义Nginx运行的用户和用户组
user www www;
 
#nginx进程数，建议设置为等于CPU总核心数。
worker_processes 8;
  
#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log /usr/local/nginx/logs/error.log info;
 
#进程pid文件
pid /usr/local/nginx/logs/nginx.pid;
 
#指定进程可以打开的最大描述符：数目
#工作模式与连接数上限
#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。
#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。
#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。
worker_rlimit_nofile 65535;
 
 
events
{
    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型
    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。
    #补充说明：
    #与apache相类，nginx针对不同的操作系统，有不同的事件模型
    #A）标准事件模型
    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll
    #B）高效事件模型
    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。
    #Epoll：使用于Linux内核2.6版本及以后的系统。
    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。
    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。
    use epoll;
 
    #单个进程最大连接数（最大连接数=连接数*进程数）
    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。
    worker_connections 65535;
 
    #keepalive超时时间。
    keepalive_timeout 60;
 
    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。
    #分页大小可以用命令getconf PAGESIZE 取得。
    #[root@web001 ~]# getconf PAGESIZE
    #4096
    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。
    client_header_buffer_size 4k;
 
    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。
    open_file_cache max=65535 inactive=60s;
 
    #这个是指多长时间检查一次缓存的有效信息。
    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.
    open_file_cache_valid 80s;
 
    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。
    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.
    open_file_cache_min_uses 1;
     
    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.
    open_file_cache_errors on;
}
  
  
  
#设定http服务器，利用它的反向代理功能提供负载均衡支持
http
{
    #文件扩展名与文件类型映射表
    include mime.types;
 
    #默认文件类型
    default_type application/octet-stream;
 
    #默认编码
    #charset utf-8;
 
    #服务器名字的hash表大小
    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.
    server_names_hash_bucket_size 128;
 
    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。
    client_header_buffer_size 32k;
 
    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。
    large_client_header_buffers 4 64k;
 
    #设定通过nginx上传文件的大小
    client_max_body_size 8m;
 
    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。
    sendfile on;
 
    #开启目录列表访问，合适下载服务器，默认关闭。
    autoindex on;
 
    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用
    tcp_nopush on;
      
    tcp_nodelay on;
 
    #长连接超时时间，单位是秒
    keepalive_timeout 120;
 
    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
 
    #gzip模块设置
    gzip on; #开启gzip压缩输出
    gzip_min_length 1k;    #最小压缩文件大小
    gzip_buffers 4 16k;    #压缩缓冲区
    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_comp_level 2;    #压缩等级
    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_vary on;
 
    #开启限制IP连接数的时候需要使用
    #limit_zone crawler $binary_remote_addr 10m;
 
 
 
    #负载均衡配置
    upstream piao.jd.com {
      
        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。
        server 192.168.80.121:80 weight=3;
        server 192.168.80.122:80 weight=2;
        server 192.168.80.123:80 weight=3;
 
        #nginx的upstream目前支持4种方式的分配
        #1、轮询（默认）
        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
        #2、weight
        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。
        #例如：
        #upstream bakend {
        #    server 192.168.0.14 weight=10;
        #    server 192.168.0.15 weight=10;
        #}
        #2、ip_hash
        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
        #例如：
        #upstream bakend {
        #    ip_hash;
        #    server 192.168.0.14:88;
        #    server 192.168.0.15:80;
        #}
        #3、fair（第三方）
        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。
        #upstream backend {
        #    server server1;
        #    server server2;
        #    fair;
        #}
        #4、url_hash（第三方）
        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。
        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法
        #upstream backend {
        #    server squid1:3128;
        #    server squid2:3128;
        #    hash $request_uri;
        #    hash_method crc32;
        #}
 
        #tips:
        #upstream bakend{#定义负载均衡设备的Ip及设备状态}{
        #    ip_hash;
        #    server 127.0.0.1:9090 down;
        #    server 127.0.0.1:8080 weight=2;
        #    server 127.0.0.1:6060;
        #    server 127.0.0.1:7070 backup;
        #}
        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;
 
        #每个设备的状态设置为:
        #1.down表示单前的server暂时不参与负载
        #2.weight为weight越大，负载的权重就越大。
        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误
        #4.fail_timeout:max_fails次失败后，暂停的时间。
        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。
 
        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。
        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug
        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录
        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡
    }
      
      
      
    #虚拟主机的配置
    server
    {
        #监听端口
        listen 80;
 
        #域名可以有多个，用空格隔开
        server_name www.jd.com jd.com;
        index index.html index.htm index.php;
        root /data/www/jd;
 
        #对******进行负载均衡
        location ~ .*.(php|php5)?$
        {
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            include fastcgi.conf;
        }
          
        #图片缓存时间设置
        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires 10d;
        }
          
        #JS和CSS缓存时间设置
        location ~ .*.(js|css)?$
        {
            expires 1h;
        }
          
        #日志格式设定
        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；
        #$remote_user：用来记录客户端用户名称；
        #$time_local： 用来记录访问时间与时区；
        #$request： 用来记录请求的url与http协议；
        #$status： 用来记录请求状态；成功是200，
        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；
        #$http_referer：用来记录从那个页面链接访问过来的；
        #$http_user_agent：记录客户浏览器的相关信息；
        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。
        log_format access '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
        '$status $body_bytes_sent &quot;$http_referer&quot; '
        '&quot;$http_user_agent&quot; $http_x_forwarded_for';
          
        #定义本虚拟主机的访问日志
        access_log  /usr/local/nginx/logs/host.access.log  main;
        access_log  /usr/local/nginx/logs/host.access.404.log  log404;
          
        #对 &quot;/&quot; 启用反向代理
        location / {
            proxy_pass http://127.0.0.1:88;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
              
            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              
            #以下是一些反向代理的配置，可选。
            proxy_set_header Host $host;
 
            #允许客户端请求的最大单文件字节数
            client_max_body_size 10m;
 
            #缓冲区代理缓冲用户端请求的最大字节数，
            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。
            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误
            client_body_buffer_size 128k;
 
            #表示使nginx阻止HTTP应答代码为400或者更高的应答。
            proxy_intercept_errors on;
 
            #后端服务器连接的超时时间_发起握手等候响应超时时间
            #nginx跟后端服务器连接超时时间(代理连接超时)
            proxy_connect_timeout 90;
 
            #后端服务器数据回传时间(代理发送超时)
            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据
            proxy_send_timeout 90;
 
            #连接成功后，后端服务器响应时间(代理接收超时)
            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）
            proxy_read_timeout 90;
 
            #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小
            proxy_buffer_size 4k;
 
            #proxy_buffers缓冲区，网页平均在32k以下的设置
            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k
            proxy_buffers 4 32k;
 
            #高负荷下缓冲大小（proxy_buffers*2）
            proxy_busy_buffers_size 64k;
 
            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长
            #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            proxy_temp_file_write_size 64k;
        }
          
          
        #设定查看Nginx状态的地址
        location /NginxStatus {
            stub_status on;
            access_log on;
            auth_basic &quot;NginxStatus&quot;;
            auth_basic_user_file confpasswd;
            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。
        }
          
        #本地动静分离反向代理配置
        #所有jsp的页面均交由tomcat或resin处理
        location ~ .(jsp|jspx|do)?$ {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://127.0.0.1:8080;
        }
          
        #所有静态文件由nginx直接读取不经过tomcat或resin
        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|
        pdf|xls|mp3|wma)$
        {
            expires 15d;
        }
          
        location ~ .*.(js|css)?$
        {
            expires 1h;
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[简历]]></title>
        <id>https://wanghwyd.github.io/blogs/post/jian-li/</id>
        <link href="https://wanghwyd.github.io/blogs/post/jian-li/">
        </link>
        <updated>2021-11-24T07:44:30.000Z</updated>
        <content type="html"><![CDATA[<p>##📱 联系方式</p>
<ul>
<li>手机：13409909996(常用)/17376592189(杭州)</li>
<li>Email：542524570@163.com</li>
<li>QQ/微信号：542524570/whw13409909996</li>
</ul>
<hr>
<h2 id="个人信息">📄个人信息</h2>
<figure data-type="image" tabindex="1"><img src="https://wanghwyd.github.io/blogs/post-images/1637897584113.png" alt="" loading="lazy"></figure>
<ul>
<li>王浩文/男/1993</li>
<li>工作年限：6年</li>
<li>专科/长江职业技术学院</li>
<li>期望职位：Android开发/前端开发/后台开发</li>
<li>期望薪资：面议</li>
</ul>
<hr>
<h3 id="技能清单">技能清单</h3>
<ul>
<li>1.熟练Android自定义控件，可以根据UI效果图实现控件;</li>
<li>2.熟练掌握常见列表级控件的优化和技巧;</li>
<li>3.熟练掌握异步任务加载网络数据;</li>
<li>4.熟练掌握幕适配和兼容性适配;</li>
<li>5.熟悉Android下内存优化，性能优化,能够妥善地平衡功能和性能开销;</li>
<li>6.熟悉Android下的Hanlder 消息机制 和 AsyncTask 异步任务机制;</li>
<li>7.能独立开发绝大多数android App项目</li>
<li>8.熟悉百度地图定位、语音、图片识别、第三方支付、天地图、face++人脸识别、shardSDK第三方登录、融云客服、极光推送和即时聊天通讯等app第三方平台功能</li>
<li>9.熟悉okhttp、butterknife、eventbus、imageloader、Glide、RxJava、RxAndroid、retrofit2、各类视频框架,等第三方库</li>
<li>10.使用过mui前端框架开发过Hybrid App，上架android平台和ios平台;</li>
<li>11.能熟练使用uniapp前端框架开发android app、ios app、微信小程序、h5、支付宝小程序开发，上架android平台和ios平台;</li>
<li>12.在业务开展中，表现出优秀的技术判断与决策能力、产品感觉和问题分析能力，能够合理评估开发时间，并进行开发。</li>
<li>13.熟悉android,ios上架流程,在多个app平台进行上架</li>
<li>14.能使用flutter进行跨平台开发app</li>
<li>Android/Java/Xml/Json/html5/html/Json/TCP/socket/webview/mvc/mvp/javaScript</li>
<li>AndroidStudio/Eclipse/Svn/Git/github/mui/uni-app/rxjava/rxandroid/flutter/kotlin/uni-app/vue</li>
</ul>
<hr>
<h2 id="工作经历">💻 工作经历</h2>
<h2 id="浙江联潮科技有限公司2021年2月-至今">浙江联潮科技有限公司（2021年2月-至今）</h2>
<p>工作内容:根据公司需求完成后台springboot项目,Android原生项目,js vue 前端项目</p>
<h2 id="浙江逸智信息科技有限公司浙江恒逸石化有限公司2019年5月-2021年2月">浙江逸智信息科技有限公司(浙江恒逸石化有限公司)（2019年5月-2021年2月）</h2>
<p>工作内容:根据公司需求完成android 和 ios app项目,js vue 前端项目,uni-app项目</p>
<h2 id="上海得逸信息技术有限公司汉得信息子公司2019年3月-2019年5月">上海得逸信息技术有限公司(汉得信息子公司)（2019年3月-2019年5月）</h2>
<p>工作内容:外派恒逸石化(浙江逸智信息科技有限公司),完成甲方需求</p>
<h2 id="浙江艋顺信息科技有限公司-2016年11月-2019年3月">浙江艋顺信息科技有限公司 （2016年11月 - 2019年3月）</h2>
<p>工作内容:负责公司android项目开发,android项目架构设计,对甲方需求整理</p>
<h2 id="项目经验">项目经验</h2>
<h3 id="智慧渔港浙江联潮信息科技有限公司2021年5月-后台独立开发">智慧渔港(浙江联潮信息科技有限公司2021年5月-) 后台独立开发</h3>
<h3 id="嘉兴市海洋空间资源数据外业采集系统平板app浙江联潮信息科技有限公司2021年2月-4月底-独立开发">嘉兴市海洋空间资源数据外业采集系统平板app(浙江联潮信息科技有限公司2021年2月-4月底) 独立开发</h3>
<h3 id="临海市海洋基础数据管理系统平板app浙江联潮信息科技有限公司2021年2月-4月底-独立开发">临海市海洋基础数据管理系统平板app(浙江联潮信息科技有限公司2021年2月-4月底) 独立开发</h3>
<p><a href="https://wanghwyd.github.io/blogs/post/linhaizr/">图片</a><br>
该项目为原生项目,<br>
1.集成华测RTK,google ORC<br>
2.mbtiles,ArcGIS切片bundle/bundlx读取,excel解析<br>
3.图层数据展示,数据采集,数据核查,文件查看,系统设置</p>
<h3 id="临海市海洋基础数据管理系统后台系统浙江联潮信息科技有限公司2021年2月-4月底-独立开发">临海市海洋基础数据管理系统后台系统(浙江联潮信息科技有限公司2021年2月-4月底) 独立开发</h3>
<p>1.后台框架使用若依</p>
<h3 id="运维">运维</h3>
<p>1.高新（逸鹏）运维<br>
2.恒逸微商城运维<br>
3.营销闭环 运维</p>
<h3 id="双兔单锭自动化项目前端加扫码枪">双兔(单锭)自动化项目(前端加扫码枪)</h3>
<p>1.主要负责后台管理系统前端<br>
2.扫码枪app 丝车追溯 质检报告 在线丝车 生产计划 丝车管理</p>
<h3 id="机配件管理逸景工厂扫码出库-混合app">机配件管理(逸景工厂扫码出库) 混合app</h3>
<p>原生加vue h5<br>
1.对接公司sap<br>
2.主要功能:公司清单 工厂清单 成本中心 库存地点 收货方查询 领料单 扫码出库</p>
<h3 id="恒逸微商城浙江逸智信息科技有限公司2019年6月-12月-独立开发">恒逸微商城(浙江逸智信息科技有限公司2019年6月-12月) 独立开发</h3>
<p>该项目为uni-app框架开发的混合项目,适配android 、ios端</p>
<p>1.使用uni-app框架进行开发,独立完成项目</p>
<p>项目图片: https://github.com/wangHwYD/resume/blob/master/images/hywsc/wsc.md</p>
<h3 id="任务指派上海得逸信息技术有限公司2019年3月-2019年5月-独立开发">任务指派(上海得逸信息技术有限公司2019年3月-2019年5月) 独立开发</h3>
<p>该项目为原生项目,<br>
1.集成百度语音,完成语音转行为文字功能,<br>
2.修复发布模块bug 语音模块 发布任务功能<br>
3.任务模块,完成任务修改删除,自由行任务增加协同人员功能<br>
4.任务页面,登陆,我的<br>
5.项目部分优化,抽取部分代码,删除无用资源,优化项目</p>
<h3 id="海洋空间资源数据采集系统浙江艋顺信息科技有限公司201803-05平板项目-独立开发">海洋空间资源数据采集系统(浙江艋顺信息科技有限公司2018.03-05)平板项目 独立开发</h3>
<p>负责该项目开发,项目涉及国土资源数据未进行上架;<br>
1.该项目中有大量的JavaScript交互<br>
2.项目地图采用卫星瓦片图,海量图片数据加载<br>
3.项目使用mvc架构  rxjava2+rxandroid+greendao+glide+jiaozivideoplayer<br>
4.数据使用AES加密解密<br>
5.文档查看使用word数据解析 xlsx数据生成,生成 pdf google全景图<br>
6.集成华测RTK GPS测绘仪,进行gps数据保存导出<br>
7.进行地图数据修正和采集<br>
操作手册:http://note.youdao.com/noteshare?id=4083b59745b4db1a1a5c4e46c76a1471<br>
项目图片:<br>
https://github.com/wangHwYD/resume/blob/master/images/%E6%B5%B7%E6%B4%8B%E7%A9%BA%E9%97%B4%E8%B5%84%E6%BA%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F/hy.md</p>
<h3 id="湾滩长助手浙江艋顺信息科技有限公司201712-20182独立开发">湾滩长助手(浙江艋顺信息科技有限公司2017.12-2018.2)独立开发</h3>
<p>负责对android app开发<br>
项目使用:<br>
1.使用mvp架构<br>
2.网络框架使用rxjava2+rxandroid++okhttp+retrofit2<br>
3.数据库使用greendao,图片框架glide,视频库jiaozivideoplayer<br>
4.集成第三方厂商视频监控,接入视频摄像头拍摄的视频流<br>
5.集成 极光推送 百度语音 天地图<br>
使用天地图完成巡滩路线记录,使用视频监控完成视频巡滩逻辑<br>
解决在手机锁屏状态下的gps数据采集,进行gps数据精度矫正,完成海康摄像头的视频数流读取与解析<br>
项目图片 https://github.com/wangHwYD/resume/blob/master/images/%E6%B9%BE%E6%BB%A9%E9%95%BF%E5%8A%A9%E6%89%8B/tz.md</p>
<h3 id="水产品安全监管平台浙江艋顺信息科技有限公司201706-06项目-独立开发">水产品安全监管平台(浙江艋顺信息科技有限公司2017.06-06)项目  独立开发</h3>
<p>该项目 使用DCloud的MUI框架混合开发<br>
项目业务为浙江省玉环市渔业局项目,监察市内渔业养殖户渔药使用情况<br>
1.使用Dcloud 的MUI进行的混合开发,<br>
2.上架android市场和ios端<br>
上架市场 豌豆荚,360,华为 ios appStore<br>
项目图片:<br>
https://github.com/wangHwYD/resume/blob/master/images/%E6%B0%B4%E4%BA%A7%E5%93%81%E5%AE%89%E5%85%A8%E7%9B%91%E7%AE%A1%E5%B9%B3%E5%8F%B0/scp.md</p>
<h3 id="海宝一号浙江艋顺信息科技有限公司201701-04-广告机项目-独立开发">海宝一号(浙江艋顺信息科技有限公司2017.01-04) 广告机项目 独立开发</h3>
<p>负责该项目<br>
1.使用mvc设计模式,<br>
2.网络架构为rxjava2+rxandroid+okhttp+retrofit2<br>
3.图片框架 glide4.1数据库greendao 集成厂家身份证读取模块,   百度语音,GPS/北斗<br>
4.记录gps数据,回传服务器,开机启动,进行身份证信息读取</p>
<p>项目图片:<br>
https://github.com/wangHwYD/resume/blob/master/images/%E6%B5%B7%E5%AE%9D%E4%B8%80%E5%8F%B7/hb.md</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://wanghwyd.github.io/blogs/post/about/</id>
        <link href="https://wanghwyd.github.io/blogs/post/about/">
        </link>
        <updated>2021-11-24T01:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<pre><code>    使用github + Gridea  记录一些平常遇到的bug,和整理一些技术资料
</code></pre>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<pre><code>    王浩文
</code></pre>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<pre><code>    ^_^
</code></pre>
<h2 id="联系我呀">📬 联系我呀</h2>
<pre><code>    542524570@163.com   
</code></pre>
<p><a href="https://wanghwyd.github.io/blogs/post/jian-li">个人简历</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[this application requires net framework]]></title>
        <id>https://wanghwyd.github.io/blogs/post/this-application-requires-net-framework/</id>
        <link href="https://wanghwyd.github.io/blogs/post/this-application-requires-net-framework/">
        </link>
        <updated>2018-11-24T08:06:32.000Z</updated>
        <content type="html"><![CDATA[<p>当安装MySQL高版本时，出现this application requires .net framework4提示信息，不能继续安装时，处理步骤：<br>
<img src="https://wanghwyd.github.io/blogs/post-images/1637741591495.jpg" alt="" loading="lazy"></p>
<p>1.下载所需要的Net FrameWork插件</p>
<pre><code>https://dotnet.microsoft.com/download/dotnet-framework
</code></pre>
<p>2.安装此插件<br>
等待安装完成<br>
<img src="https://wanghwyd.github.io/blogs/post-images/1637741795143.png" alt="" loading="lazy"><br>
安装完毕<br>
<img src="https://wanghwyd.github.io/blogs/post-images/1637741819526.png" alt="" loading="lazy"><br>
安装完成后会提示重启电脑<br>
3.重启电脑成功之后，再安装MySQL</p>
]]></content>
    </entry>
</feed>